# -*- coding: utf-8 -*-
"""StockPricePredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gIOVgfg5ZwvVPVpvYQf-xe4B-rKqeunt
"""

#Import necessary librabries
import math
import pandas as pd
import numpy as np
import pandas_datareader as web
import datetime
from sklearn.preprocessing import  MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout
import matplotlib.pyplot as plt
plt.style.use('bmh')

#Load Data from Drive
df = pd.read_csv('/content/drive/MyDrive/StockPricePrediction/FB.csv', index_col='Date', parse_dates=True)
company = 'FACEBOOK'

#Check if any null values are present
df.isna().any()

#Description of loaded Dataset 
df.info()

#Data Visulization of Closing price of Facebook Stock since the year 2012 till 2021
plt.title('Facebook')
plt.xlabel('Years')
plt.ylabel('Closing Price USD')
plt.plot(df['Close'])
plt.show()

training_set = df['Close']
training_set = pd.DataFrame(training_set)

#Data Preprocessing i.e scaling the data in the range of 0 to 1
sc = MinMaxScaler(feature_range=(0,1))
training_set_scaled = sc.fit_transform(training_set.values.reshape(-1,1))

training_set.shape

#Number of days to take into consideration for predicting the next price
prediction_days = 20

X_train = []
y_train = []
for i in range(prediction_days, len(training_set_scaled)):
  X_train.append(training_set_scaled[i-prediction_days:i, 0])
  y_train.append(training_set_scaled[i, 0])


X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

X_train

#Building the model with LSTM, Dropout layers and one Dense layer at the end
model = Sequential()

model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50))
model.add(Dropout(0.2))

model.add(Dense(units=1))

#Compile the model with Adam Optimizer and loss function Mean Squared Error
model.compile(optimizer='adam', loss='mean_squared_error')


#Train the model by passing the input with 100 epochs and batch size 32
model.fit(X_train, y_train, epochs=100, batch_size=32)

X_train.shape

#Loading Test Data from the year 2021 till now
test_data = pd.read_csv('/content/drive/MyDrive/StockPricePrediction/FB_test.csv')
actual_prices = test_data['Close'].values

total_dataset = pd.concat((df['Close'], test_data['Close']), axis=0)


model_inputs = total_dataset[len(total_dataset) - len(test_data) - prediction_days:].values
model_inputs = model_inputs.reshape(-1, 1)
model_inputs = sc.transform(model_inputs)

#Preprocessing of test data imported
x_test = []

for x in range(prediction_days, len(model_inputs)):
  x_test.append(model_inputs[x-prediction_days:x, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

#Predicting the prices from using the trained model
predicted_prices = model.predict(x_test)
predicted_prices = sc.inverse_transform(predicted_prices)

#Graphical Representation of actual and predicted prices of the stock
plt.plot(actual_prices, color='green', label=f"Actual {company} Price")
plt.plot(predicted_prices, color='red', label=f"Predicted {company} Price")
plt.title(f"{company} Share Price")
plt.xlabel('Time')
plt.ylabel(f"{company} Share Price")
plt.legend()
plt.show()

#Predicting price value of Next Day
real_data = [model_inputs[len(model_inputs) + 1 - prediction_days:len(model_inputs+1), 0]]
real_data = np.array(real_data)
real_data.shape
real_data = np.reshape(real_data, (real_data.shape[0], real_data.shape[1], 1))

prediction = model.predict(real_data)
prediction = sc.inverse_transform(prediction)
print("Prediction:",prediction)

"""Right now the price of Facebook stocks is 359.37 USD, which is nearby to the amount which we predicted."""

